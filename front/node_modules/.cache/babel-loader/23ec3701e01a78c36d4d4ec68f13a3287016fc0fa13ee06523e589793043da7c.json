{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\final\\\\diagnosis_repo\\\\front\\\\src\\\\components\\\\diagnosepage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiagnosisPage = () => {\n  _s();\n  const [file, setFile] = useState(null);\n  const [result, setResult] = useState(''); // 결과를 문자열로 받습니다\n  const [diagnosis, setDiagnosis] = useState(''); // 진단 결과를 별도로 저장\n\n  // 파일을 선택할 때 호출되는 함수\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n\n  // 파일을 서버로 업로드할 때 호출되는 함수\n  const handleUpload = async () => {\n    if (!file) {\n      alert('파일을 선택해주세요.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      // Step 1: 파일 업로드\n      const uploadResponse = await axios.post('http://localhost:5001/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      const {\n        file_path\n      } = uploadResponse.data;\n\n      // Step 2: 이미지 전처리\n      const preprocessResponse = await axios.post('http://localhost:5002/preprocess', {\n        file_path: file_path\n      });\n      const {\n        preprocessed_path\n      } = preprocessResponse.data;\n\n      // Step 3: 모델 예측\n      const predictResponse = await axios.post('http://localhost:5003/predict', {\n        preprocessed_path: preprocessed_path\n      });\n      const {\n        outputs\n      } = predictResponse.data;\n\n      // Step 4: 결과 해석\n      const interpretResponse = await axios.post('http://localhost:5004/interpret', {\n        outputs: outputs\n      });\n      const interpretation = interpretResponse.data;\n\n      // 진단 결과와 클래스 확률을 별도로 저장\n      setDiagnosis(interpretation.Diagnosis);\n      const {\n        Diagnosis,\n        ...classProbs\n      } = interpretation; // Diagnosis를 제외한 나머지 데이터\n      setResult(JSON.stringify(classProbs, null, 2)); // JSON 문자열로 변환\n    } catch (error) {\n      console.error('Upload error', error);\n      alert('업로드 실패!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC \\uBC0F \\uC9C4\\uB2E8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"\\uC9C4\\uB2E8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Results:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: diagnosis\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 7\n  }, this);\n};\n_s(DiagnosisPage, \"Z7atpQQ4cSafn/TqDfc0ACCBD+Q=\");\n_c = DiagnosisPage;\nexport default DiagnosisPage;\nvar _c;\n$RefreshReg$(_c, \"DiagnosisPage\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","DiagnosisPage","_s","file","setFile","result","setResult","diagnosis","setDiagnosis","handleFileChange","event","target","files","handleUpload","alert","formData","FormData","append","uploadResponse","post","headers","file_path","data","preprocessResponse","preprocessed_path","predictResponse","outputs","interpretResponse","interpretation","Diagnosis","classProbs","JSON","stringify","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/final/diagnosis_repo/front/src/components/diagnosepage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport '../App.css';\r\n\r\n\r\n\r\nconst DiagnosisPage = () => {\r\n    const [file, setFile] = useState(null);\r\n  const [result, setResult] = useState('');  // 결과를 문자열로 받습니다\r\n  const [diagnosis, setDiagnosis] = useState('');  // 진단 결과를 별도로 저장\r\n\r\n  // 파일을 선택할 때 호출되는 함수\r\n  const handleFileChange = (event) => {\r\n    setFile(event.target.files[0]);\r\n  };\r\n\r\n  // 파일을 서버로 업로드할 때 호출되는 함수\r\n  const handleUpload = async () => {\r\n    if (!file) {\r\n      alert('파일을 선택해주세요.');\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n\r\n    try {\r\n      // Step 1: 파일 업로드\r\n      const uploadResponse = await axios.post('http://localhost:5001/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      });\r\n      const { file_path } = uploadResponse.data;\r\n\r\n      // Step 2: 이미지 전처리\r\n      const preprocessResponse = await axios.post('http://localhost:5002/preprocess', {\r\n        file_path: file_path\r\n      });\r\n      const { preprocessed_path } = preprocessResponse.data;\r\n\r\n      // Step 3: 모델 예측\r\n      const predictResponse = await axios.post('http://localhost:5003/predict', {\r\n        preprocessed_path: preprocessed_path\r\n      });\r\n      const { outputs } = predictResponse.data;\r\n\r\n      // Step 4: 결과 해석\r\n      const interpretResponse = await axios.post('http://localhost:5004/interpret', {\r\n        outputs: outputs\r\n      });\r\n      const interpretation = interpretResponse.data;\r\n\r\n      // 진단 결과와 클래스 확률을 별도로 저장\r\n      setDiagnosis(interpretation.Diagnosis);\r\n      const { Diagnosis, ...classProbs } = interpretation;  // Diagnosis를 제외한 나머지 데이터\r\n      setResult(JSON.stringify(classProbs, null, 2)); // JSON 문자열로 변환\r\n    } catch (error) {\r\n      console.error('Upload error', error);\r\n      alert('업로드 실패!');\r\n    }\r\n  };\r\n  \r\n    return (\r\n      <div>\r\n        <h1>이미지 업로드 및 진단</h1>\r\n        <input type=\"file\" onChange={handleFileChange} />\r\n        <button onClick={handleUpload}>진단</button>\r\n        <div>\r\n          <h3>Results:</h3>\r\n          <p>{diagnosis}</p>  \r\n          <pre>{result}</pre>  \r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n\r\n  export default DiagnosisPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}