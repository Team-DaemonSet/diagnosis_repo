{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\diagnosis\\\\image-upload-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [result, setResult] = useState(''); // 결과를 문자열로 받습니다\n  const [diagnosis, setDiagnosis] = useState(''); // 진단 결과를 별도로 저장\n\n  // 파일을 선택할 때 호출되는 함수\n  const handleFileChange = event => {\n    setFile(event.target.files[0]);\n  };\n\n  // 파일을 서버로 업로드할 때 호출되는 함수\n  const handleUpload = async () => {\n    if (!file) {\n      alert('파일을 선택해주세요.');\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    try {\n      const response = await axios.post('http://localhost:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      // 진단 결과와 클래스 확률을 별도로 저장\n      setDiagnosis(response.data.Diagnosis);\n      const {\n        Diagnosis,\n        ...classProbs\n      } = response.data; // Diagnosis를 제외한 나머지 데이터\n      setResult(JSON.stringify(classProbs, null, 2)); // JSON 문자열로 변환\n    } catch (error) {\n      console.error('Upload error', error);\n      alert('업로드 실패!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC \\uBC0F \\uC9C4\\uB2E8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      children: \"\\uC9C4\\uB2E8\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Results:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: diagnosis\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Z7atpQQ4cSafn/TqDfc0ACCBD+Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","file","setFile","result","setResult","diagnosis","setDiagnosis","handleFileChange","event","target","files","handleUpload","alert","formData","FormData","append","response","post","headers","data","Diagnosis","classProbs","JSON","stringify","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/diagnosis/image-upload-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [result, setResult] = useState('');  // 결과를 문자열로 받습니다\n  const [diagnosis, setDiagnosis] = useState('');  // 진단 결과를 별도로 저장\n\n  // 파일을 선택할 때 호출되는 함수\n  const handleFileChange = (event) => {\n    setFile(event.target.files[0]);\n  };\n\n  // 파일을 서버로 업로드할 때 호출되는 함수\n  const handleUpload = async () => {\n    if (!file) {\n      alert('파일을 선택해주세요.');\n      return;\n    }\n\n    const formData = new FormData();\n    formData.append('file', file);\n\n    try {\n      const response = await axios.post('http://localhost:5000/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      // 진단 결과와 클래스 확률을 별도로 저장\n      setDiagnosis(response.data.Diagnosis);\n      const { Diagnosis, ...classProbs } = response.data;  // Diagnosis를 제외한 나머지 데이터\n      setResult(JSON.stringify(classProbs, null, 2)); // JSON 문자열로 변환\n    } catch (error) {\n      console.error('Upload error', error);\n      alert('업로드 실패!');\n    }\n  };\n\n  return (\n    <div>\n      <h1>이미지 업로드 및 진단</h1>\n      <input type=\"file\" onChange={handleFileChange} />\n      <button onClick={handleUpload}>진단</button>\n      <div>\n        <h3>Results:</h3>\n        <p>{diagnosis}</p>  \n        <pre>{result}</pre>  \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EAC3C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAEjD;EACA,MAAMY,gBAAgB,GAAIC,KAAK,IAAK;IAClCN,OAAO,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;EAChC,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACV,IAAI,EAAE;MACTW,KAAK,CAAC,aAAa,CAAC;MACpB;IACF;IAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEd,IAAI,CAAC;IAE7B,IAAI;MACF,MAAMe,QAAQ,GAAG,MAAMpB,KAAK,CAACqB,IAAI,CAAC,8BAA8B,EAAEJ,QAAQ,EAAE;QAC1EK,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF;MACAZ,YAAY,CAACU,QAAQ,CAACG,IAAI,CAACC,SAAS,CAAC;MACrC,MAAM;QAAEA,SAAS;QAAE,GAAGC;MAAW,CAAC,GAAGL,QAAQ,CAACG,IAAI,CAAC,CAAE;MACrDf,SAAS,CAACkB,IAAI,CAACC,SAAS,CAACF,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCZ,KAAK,CAAC,SAAS,CAAC;IAClB;EACF,CAAC;EAED,oBACEd,OAAA;IAAA4B,QAAA,gBACE5B,OAAA;MAAA4B,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBhC,OAAA;MAAOiC,IAAI,EAAC,MAAM;MAACC,QAAQ,EAAEzB;IAAiB;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjDhC,OAAA;MAAQmC,OAAO,EAAEtB,YAAa;MAAAe,QAAA,EAAC;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC1ChC,OAAA;MAAA4B,QAAA,gBACE5B,OAAA;QAAA4B,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjBhC,OAAA;QAAA4B,QAAA,EAAIrB;MAAS;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClBhC,OAAA;QAAA4B,QAAA,EAAMvB;MAAM;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC9B,EAAA,CAhDQD,GAAG;AAAAmC,EAAA,GAAHnC,GAAG;AAkDZ,eAAeA,GAAG;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}